package numeric;

import java.util.logging.Level;
import java.util.logging.Logger;

public class MatrixVektor {

    public static void main(String[] args) {
        new MatrixVektor().start();
    }

    private void start() {
        System.out.println("Matrix - Vector multiplication");
        doSequential();
        System.out.println("");
        doParallel();
    }

    private void doSequential() {
        int[] sizes = new int[]{10, 100, 1000, 10000};
        //int n=5000;
        for(int i=0;i<sizes.length;i++){
        seqMultiply(sizes[i]);
    }
        

    }
    
    private void doParallel() {
        int[] sizes = new int[]{10, 100, 1000, 10000};
        //int n=5000;
        for(int i=0;i<sizes.length;i++){
        parMultiply(sizes[i]);
    }
        

    }

    private void seqMultiply(int n) {

        //matrixszorzas
        double[][] A = new double[n][n];
        double[] B = new double[n];
        double[] C = new double[n];

        //egysegmatrixok inicializalasa
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = Math.random();
            }
            B[i] = Math.random();
            C[i] = 0;
        }

        //szorzas
        long start = System.nanoTime();
        for (int i = 0; i < n; i++) {
            double sum = 0;
            for (int j = 0; j < n; j++) {
                sum += A[i][j] * B[j];
            }
            C[i] = sum;
        }
        long stop = System.nanoTime();
        System.out.println("N: " + n + "    Time:  " + (stop-start)/1e6);
    }
    
    private void parMultiply(int n) {

        //matrixszorzas
        double[][] A = new double[n][n];
        double[] B = new double[n];
        double[] C = new double[n];

        //egysegmatrixok inicializalasa
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = Math.random();
            }
            B[i] = Math.random();
            C[i] = 0;
        }

        //szorzas        
        int p = 2;
        Thread[] threads = new Thread[p];
        long start = System.nanoTime();

        for (int k = 0; k < p; k++) {
            final int offset = k*n/p;
            final int row_size = n/p;
            threads[k] = new Thread(new Runnable() {

                @Override
                public void run() {
                    for (int i = offset; i <offset+row_size; i++) {
                        double sum = 0;
                        for (int j = 0; j < n; j++) {
                            sum += A[i][j] * B[j];
                        }
                        C[i] = sum;
                    }
                }
            });
            threads[k].start();

        }
        for (int k = 0; k < p; k++) {
            try {
                threads[k].join();
            } catch (InterruptedException ex) {
                Logger.getLogger(MatrixVektor.class.getName()).log(Level.SEVERE, null, ex);
            }            
        }
        
        long stop = System.nanoTime();
        System.out.println("N: " + n + "    Time:  " + (stop-start)/1e6);
    }
}
